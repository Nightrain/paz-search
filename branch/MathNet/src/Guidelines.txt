---------------------------------------
DESIGN GUIDELIGNES FOR MATHNET.NUMERICS
---------------------------------------

1) No C, C++ or Java (or whatever) coding style. Stick to the common C#
style as defined in: http://msdn.microsoft.com/library/default.asp
?url=/library/en-us/cpgenref/html/cpconnetframeworkdesignguidelines.asp
Although, when porting code to MathNet.Numerics, it is acceptable not to 
completely refactor the code as long as all the public elements stick to 
the C# guidelines (enabling future internal refactoring).

Notes:
- when using #region ... #endregion, the methods should be regrouped
according to the semantic of the code (not according to the level of
accessibility). Ex: do not hide always hide private member in a
'Private Members' regions. 

2) Testing: Provides NUnit tests for every introduced methods. Testing 
a class is done by introducing a 'TestingSuite' child class at the end
of the file. The 'TestingSuite' class is comprised between #if DEBUG ... 
#endif preprocessor lines. The DEBUG library includes all the testing 
suite, the RELEASE library does not.

3) Documentation: All public methods or classes should be commented.
Although (see following point), the inferface should not refer to the
underlying algorithms, but such elements must figure in the documentation
(if non-trivial). Notes MathNet.Numerics does not intend to be a maths
encyclopedia. If possible, provides web links to explain the underlying
math concepts.

4) MathNet.Numerics is algorithm-independent from a user perspective
Often several algorithms are available for computing any mathematical
function. Unless there is a very strong tradeoff only include ONE of
the algorithms and DO NOT put the name of the algorithm in a public class
name or public method name. In particular, unless exceptional cases 
(like arbitrary precision numerics), the 'double' is used MathNet.Numerics,
do not duplicate algorithms for 'float' or 'decimal'.

5) Whenever you could not comply to those guidelines (work in
progress for example), do not commit anything without adding explicit
"TODO:" comments that points out what remains to be done.

Joannes Vermorel, 2004
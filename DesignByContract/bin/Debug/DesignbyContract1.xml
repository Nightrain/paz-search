<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DesignbyContract1</name>
    </assembly>
    <members>
        <member name="T:DesignByContract.Check">
            <summary>
            Design By Contract Checks.
            
            Each method generates an exception or
            a trace assertion statement if the contract is broken.
            </summary>
            <remarks>
            This example shows how to call the Require method.
            Assume DBC_CHECK_PRECONDITION is defined.
            <code>
            public void Test(int x)
            {
            	try
            	{
            		Check.Require(x > 1, "x must be > 1");
            	}
            	catch (System.Exception ex)
            	{
            		Console.WriteLine(ex.ToString());
            	}
            }
            </code>
            If you wish to use trace assertion statements, intended for Debug scenarios,
            rather than exception handling then set 
            
            <code>Check.UseAssertions = true</code>
            
            You can specify this in your application entry point and maybe make it
            dependent on conditional compilation flags or configuration file settings, e.g.,
            <code>
            #if DBC_USE_ASSERTIONS
            Check.UseAssertions = true;
            #endif
            </code>
            You can direct output to a Trace listener. For example, you could insert
            <code>
            Trace.Listeners.Clear();
            Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));
            </code>
            
            or direct output to a file or the Event Log.
            
            (Note: For ASP.NET clients use the Listeners collection
            of the Debug, not the Trace, object and, for a Release build, only exception-handling
            is possible.)
            </remarks>
            
        </member>
        <member name="M:DesignByContract.Check.Require(System.Boolean,System.String)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Require(System.Boolean,System.String,System.Exception)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Require(System.Boolean)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Ensure(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Ensure(System.Boolean,System.String,System.Exception)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Ensure(System.Boolean)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Invariant(System.Boolean,System.String)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Invariant(System.Boolean,System.String,System.Exception)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Invariant(System.Boolean)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Assert(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Assert(System.Boolean,System.String,System.Exception)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.Assert(System.Boolean)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.RequireTrace(System.Boolean,System.String)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.RequireTrace(System.Boolean)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.EnsureTrace(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.EnsureTrace(System.Boolean)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.InvariantTrace(System.Boolean,System.String)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.InvariantTrace(System.Boolean)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.AssertTrace(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:DesignByContract.Check.AssertTrace(System.Boolean)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="P:DesignByContract.Check.UseAssertions">
            <summary>
            Set this if you wish to use Trace Assert statements 
            instead of exception handling. 
            (The Check class uses exception handling by default.)
            </summary>
        </member>
        <member name="P:DesignByContract.Check.UseExceptions">
            <summary>
            Is exception handling being used?
            </summary>
        </member>
        <member name="T:DesignByContract.DesignByContractException">
            <summary>
            Exception raised when a contract is broken.
            Catch this exception type if you wish to differentiate between 
            any DesignByContract exception and other runtime exceptions.
             
            </summary>
        </member>
        <member name="T:DesignByContract.PreconditionException">
            <summary>
            Exception raised when a precondition fails.
            </summary>
        </member>
        <member name="M:DesignByContract.PreconditionException.#ctor">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.PreconditionException.#ctor(System.String)">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.PreconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="T:DesignByContract.PostconditionException">
            <summary>
            Exception raised when a postcondition fails.
            </summary>
        </member>
        <member name="M:DesignByContract.PostconditionException.#ctor">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.PostconditionException.#ctor(System.String)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="T:DesignByContract.InvariantException">
            <summary>
            Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:DesignByContract.InvariantException.#ctor">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.InvariantException.#ctor(System.String)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.InvariantException.#ctor(System.String,System.Exception)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="T:DesignByContract.AssertionException">
            <summary>
            Exception raised when an assertion fails.
            </summary>
        </member>
        <member name="M:DesignByContract.AssertionException.#ctor">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.AssertionException.#ctor(System.String)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:DesignByContract.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
    </members>
</doc>
